type: edu
files:
- name: src/org/apache/beam/learning/katas/windowing/fixedwindow/Task.java
  visible: true
  placeholders:
  - offset: 2906
    length: 138
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 2906
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      events
              .apply(Window.into(FixedWindows.of(Duration.standardDays(1))))
              .apply(Count.perElement())
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.windowing.fixedwindow;

    import org.apache.beam.learning.katas.util.Log;
    import org.apache.beam.sdk.Pipeline;
    import org.apache.beam.sdk.options.PipelineOptions;
    import org.apache.beam.sdk.options.PipelineOptionsFactory;
    import org.apache.beam.sdk.transforms.Count;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.transforms.windowing.FixedWindows;
    import org.apache.beam.sdk.transforms.windowing.Window;
    import org.apache.beam.sdk.values.KV;
    import org.apache.beam.sdk.values.PCollection;
    import org.apache.beam.sdk.values.TimestampedValue;
    import org.joda.time.Duration;
    import org.joda.time.Instant;

    public class Task {

      public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).create();
        Pipeline pipeline = Pipeline.create(options);

        PCollection<String> events =
            pipeline.apply(
                Create.timestamped(
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-05T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-05T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-08T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-08T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-08T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-10T00:00:00+00:00"))
                )
            );

        PCollection<KV<String, Long>> output = applyTransform(events);

        output.apply(Log.ofElements());

        pipeline.run();
      }

      static PCollection<KV<String, Long>> applyTransform(PCollection<String> events) {
        return TODO();
      }

    }
  learner_created: false
- name: test/org/apache/beam/learning/katas/windowing/fixedwindow/TaskTest.java
  visible: false
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.windowing.fixedwindow;

    import java.io.Serializable;
    import org.apache.beam.sdk.testing.PAssert;
    import org.apache.beam.sdk.testing.TestPipeline;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.transforms.DoFn;
    import org.apache.beam.sdk.transforms.ParDo;
    import org.apache.beam.sdk.transforms.windowing.BoundedWindow;
    import org.apache.beam.sdk.values.KV;
    import org.apache.beam.sdk.values.PCollection;
    import org.apache.beam.sdk.values.TimestampedValue;
    import org.joda.time.Instant;
    import org.junit.Rule;
    import org.junit.Test;

    public class TaskTest implements Serializable {

      @Rule
      public final transient TestPipeline testPipeline = TestPipeline.create();

      @Test
      public void fixedWindow() {
        PCollection<String> eventsPColl =
            testPipeline.apply(
                Create.timestamped(
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-01T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-05T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-05T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-08T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-08T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-08T00:00:00+00:00")),
                    TimestampedValue.of("event", Instant.parse("2019-06-10T00:00:00+00:00"))
                )
            );

        PCollection<KV<String, Long>> results = Task.applyTransform(eventsPColl);

        PCollection<WindowedEvent> windowedResults =
            results.apply("WindowedEvent",
                ParDo.of(new DoFn<KV<String, Long>, WindowedEvent>() {

                  @ProcessElement
                  public void processElement(@Element KV<String, Long> element,
                      BoundedWindow window, OutputReceiver<WindowedEvent> out) {

                    out.output(
                        new WindowedEvent(element.getKey(), element.getValue(), window.toString()));
                  }

                })
            );

        PAssert.that(windowedResults)
            .containsInAnyOrder(
                new WindowedEvent("event", 4L, "[2019-06-01T00:00:00.000Z..2019-06-02T00:00:00.000Z)"),
                new WindowedEvent("event", 2L, "[2019-06-05T00:00:00.000Z..2019-06-06T00:00:00.000Z)"),
                new WindowedEvent("event", 3L, "[2019-06-08T00:00:00.000Z..2019-06-09T00:00:00.000Z)"),
                new WindowedEvent("event", 1L, "[2019-06-10T00:00:00.000Z..2019-06-11T00:00:00.000Z)")
            );

        testPipeline.run().waitUntilFinish();
      }

    }
  learner_created: false
- name: test/org/apache/beam/learning/katas/windowing/fixedwindow/WindowedEvent.java
  visible: false
  text: |
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.windowing.fixedwindow;

    import java.io.Serializable;
    import java.util.Objects;

    public class WindowedEvent implements Serializable {

      private String event;
      private Long count;
      private String window;

      public WindowedEvent(String event, Long count, String window) {
        this.event = event;
        this.count = count;
        this.window = window;
      }

      @Override
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        WindowedEvent that = (WindowedEvent) o;
        return event.equals(that.event) &&
            count.equals(that.count) &&
            window.equals(that.window);
      }

      @Override
      public int hashCode() {
        return Objects.hash(event, count, window);
      }

      @Override
      public String toString() {
        return "WindowedEvent{" +
            "event='" + event + '\'' +
            ", count=" + count +
            ", window='" + window + '\'' +
            '}';
      }

    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 15 May 2021 18:06:24 UTC
record: -1
