type: edu
files:
- name: src/org/apache/beam/learning/katas/coretransforms/flatten/Task.java
  visible: true
  placeholders:
  - offset: 2040
    length: 77
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 2040
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      PCollectionList.of(words1).and(words2)
              .apply(Flatten.pCollections())
  text: |-
    /*
     *  Licensed to the Apache Software Foundation (ASF) under one
     *  or more contributor license agreements.  See the NOTICE file
     *  distributed with this work for additional information
     *  regarding copyright ownership.  The ASF licenses this file
     *  to you under the Apache License, Version 2.0 (the
     *  "License"); you may not use this file except in compliance
     *  with the License.  You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     *  Unless required by applicable law or agreed to in writing, software
     *  distributed under the License is distributed on an "AS IS" BASIS,
     *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     *  See the License for the specific language governing permissions and
     *  limitations under the License.
     */

    package org.apache.beam.learning.katas.coretransforms.flatten;

    import org.apache.beam.learning.katas.util.Log;
    import org.apache.beam.sdk.Pipeline;
    import org.apache.beam.sdk.options.PipelineOptions;
    import org.apache.beam.sdk.options.PipelineOptionsFactory;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.transforms.Flatten;
    import org.apache.beam.sdk.values.PCollection;
    import org.apache.beam.sdk.values.PCollectionList;

    public class Task {

      public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).create();
        Pipeline pipeline = Pipeline.create(options);

        PCollection<String> wordsStartingWithA =
            pipeline.apply("Words starting with A",
                Create.of("apple", "ant", "arrow")
            );

        PCollection<String> wordsStartingWithB =
            pipeline.apply("Words starting with B",
                Create.of("ball", "book", "bow")
            );

        PCollection<String> output = applyTransform(wordsStartingWithA, wordsStartingWithB);

        output.apply(Log.ofElements());

        pipeline.run();
      }

      static PCollection<String> applyTransform(
          PCollection<String> words1, PCollection<String> words2) {

        return TODO();
      }

    }
  learner_created: false
- name: test/org/apache/beam/learning/katas/coretransforms/flatten/TaskTest.java
  visible: false
  text: |-
    /*
     *  Licensed to the Apache Software Foundation (ASF) under one
     *  or more contributor license agreements.  See the NOTICE file
     *  distributed with this work for additional information
     *  regarding copyright ownership.  The ASF licenses this file
     *  to you under the Apache License, Version 2.0 (the
     *  "License"); you may not use this file except in compliance
     *  with the License.  You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     *  Unless required by applicable law or agreed to in writing, software
     *  distributed under the License is distributed on an "AS IS" BASIS,
     *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     *  See the License for the specific language governing permissions and
     *  limitations under the License.
     */

    package org.apache.beam.learning.katas.coretransforms.flatten;

    import org.apache.beam.sdk.testing.PAssert;
    import org.apache.beam.sdk.testing.TestPipeline;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.values.PCollection;
    import org.junit.Rule;
    import org.junit.Test;

    public class TaskTest {

      @Rule
      public final transient TestPipeline testPipeline = TestPipeline.create();

      @Test
      public void flatten() {
        PCollection<String> wordsStartingWithA =
            testPipeline.apply("Words starting with A",
                Create.of("apple", "ant", "arrow"));
        PCollection<String> wordsStartingWithB =
            testPipeline.apply("Words starting with B",
                Create.of("ball", "book", "bow"));

        PCollection<String> results = Task.applyTransform(wordsStartingWithA, wordsStartingWithB);

        PAssert.that(results)
            .containsInAnyOrder("apple", "ant", "arrow", "ball", "book", "bow");

        testPipeline.run().waitUntilFinish();
      }

    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 29 Mar 2021 12:03:35 UTC
record: -1
