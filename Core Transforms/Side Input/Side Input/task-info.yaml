type: edu
files:
- name: src/org/apache/beam/learning/katas/coretransforms/sideinput/Task.java
  visible: true
  placeholders:
  - offset: 2715
    length: 39
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 2716
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: citiesToCountries.apply(View.asMap())
  - offset: 2914
    length: 542
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 2883
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      persons.apply(ParDo.of(new DoFn<Person, Person>() {

            @ProcessElement
            public void processElement(@Element Person person, OutputReceiver<Person> out,
                ProcessContext context) {
              Map<String, String> citiesToCountries = context.sideInput(citiesToCountriesView);
              String city = person.getCity();
              String country = citiesToCountries.get(city);

              out.output(new Person(person.getName(), city, country));
            }

          }).withSideInputs(citiesToCountriesView))
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.coretransforms.sideinput;

    import java.util.Map;
    import org.apache.beam.learning.katas.util.Log;
    import org.apache.beam.sdk.Pipeline;
    import org.apache.beam.sdk.options.PipelineOptions;
    import org.apache.beam.sdk.options.PipelineOptionsFactory;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.transforms.DoFn;
    import org.apache.beam.sdk.transforms.ParDo;
    import org.apache.beam.sdk.transforms.View;
    import org.apache.beam.sdk.values.KV;
    import org.apache.beam.sdk.values.PCollection;
    import org.apache.beam.sdk.values.PCollectionView;

    public class Task {

      public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).create();
        Pipeline pipeline = Pipeline.create(options);

        PCollection<KV<String, String>> citiesToCountries =
            pipeline.apply("Cities and Countries",
                Create.of(
                    KV.of("Beijing", "China"),
                    KV.of("London", "United Kingdom"),
                    KV.of("San Francisco", "United States"),
                    KV.of("Singapore", "Singapore"),
                    KV.of("Sydney", "Australia")
                ));

        PCollectionView<Map<String, String>> citiesToCountriesView =
            createView(citiesToCountries);

        PCollection<Person> persons =
            pipeline.apply("Persons",
                Create.of(
                    new Person("Henry", "Singapore"),
                    new Person("Jane", "San Francisco"),
                    new Person("Lee", "Beijing"),
                    new Person("John", "Sydney"),
                    new Person("Alfred", "London")
                ));

        PCollection<Person> output = applyTransform(persons, citiesToCountriesView);

        output.apply(Log.ofElements());

        pipeline.run();
      }

      static PCollectionView<Map<String, String>> createView(
          PCollection<KV<String, String>> citiesToCountries) {

        return TODO();
      }

      static PCollection<Person> applyTransform(
          PCollection<Person> persons, PCollectionView<Map<String, String>> citiesToCountriesView) {

        return TODO();
      }

    }
  learner_created: false
- name: src/org/apache/beam/learning/katas/coretransforms/sideinput/Person.java
  visible: true
  text: |
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.coretransforms.sideinput;

    import java.io.Serializable;
    import java.util.Objects;

    public class Person implements Serializable {

      private String name;
      private String city;
      private String country;

      public Person(String name, String city) {
        this.name = name;
        this.city = city;
      }

      public Person(String name, String city, String country) {
        this.name = name;
        this.city = city;
        this.country = country;
      }

      public String getName() {
        return name;
      }

      public String getCity() {
        return city;
      }

      public String getCountry() {
        return country;
      }

      @Override
      public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Person person = (Person) o;

        return Objects.equals(name, person.name) &&
                Objects.equals(city, person.city) &&
                Objects.equals(country, person.country);
      }

      @Override
      public int hashCode() {
        return Objects.hash(name, city, country);
      }

      @Override
      public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", city='" + city + '\'' +
                ", country='" + country + '\'' +
                '}';
      }

    }
  learner_created: false
- name: test/org/apache/beam/learning/katas/coretransforms/sideinput/TaskTest.java
  visible: false
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.coretransforms.sideinput;

    import java.util.Map;
    import org.apache.beam.sdk.testing.PAssert;
    import org.apache.beam.sdk.testing.TestPipeline;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.values.KV;
    import org.apache.beam.sdk.values.PCollection;
    import org.apache.beam.sdk.values.PCollectionView;
    import org.junit.Rule;
    import org.junit.Test;

    public class TaskTest {

      @Rule
      public final transient TestPipeline testPipeline = TestPipeline.create();

      @Test
      public void sideInput() {
        PCollection<KV<String, String>> citiesToCountries =
            testPipeline.apply("Cities and Countries",
                Create.of(
                    KV.of("Beijing", "China"),
                    KV.of("London", "United Kingdom"),
                    KV.of("San Francisco", "United States"),
                    KV.of("Singapore", "Singapore"),
                    KV.of("Sydney", "Australia")
                ));

        PCollectionView<Map<String, String>> citiesToCountriesView =
            Task.createView(citiesToCountries);

        PCollection<Person> persons =
            testPipeline.apply("Persons",
                Create.of(
                    new Person("Henry", "Singapore"),
                    new Person("Jane", "San Francisco"),
                    new Person("Lee", "Beijing"),
                    new Person("John", "Sydney"),
                    new Person("Alfred", "London")
                ));

        PCollection<Person> results = Task.applyTransform(persons, citiesToCountriesView);

        PAssert.that(results)
            .containsInAnyOrder(
                new Person("Henry", "Singapore", "Singapore"),
                new Person("Jane", "San Francisco", "United States"),
                new Person("Lee", "Beijing", "China"),
                new Person("John", "Sydney", "Australia"),
                new Person("Alfred", "London", "United Kingdom")
            );

        testPipeline.run().waitUntilFinish();
      }

    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 29 Mar 2021 13:36:02 UTC
record: -1
