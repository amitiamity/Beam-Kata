type: edu
files:
- name: src/org/apache/beam/learning/katas/coretransforms/composite/Task.java
  visible: true
  placeholders:
  - offset: 1804
    length: 0
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1929
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      @Override
          public PCollection<Integer> expand(PCollection<String> input) {
            return input
                .apply(ParDo.of(new DoFn<String, Integer>() {

                  @ProcessElement
                  public void processElement(@Element String numbers, OutputReceiver<Integer> out) {
                    Arrays.stream(numbers.split(","))
                        .forEach(numStr -> out.output(Integer.parseInt(numStr)));
                  }

                }))

                .apply(MapElements.into(integers()).via(number -> number * 10));
          }
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.coretransforms.composite;

    import static org.apache.beam.sdk.values.TypeDescriptors.integers;

    import java.util.Arrays;
    import org.apache.beam.learning.katas.util.Log;
    import org.apache.beam.sdk.Pipeline;
    import org.apache.beam.sdk.options.PipelineOptions;
    import org.apache.beam.sdk.options.PipelineOptionsFactory;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.transforms.DoFn;
    import org.apache.beam.sdk.transforms.MapElements;
    import org.apache.beam.sdk.transforms.PTransform;
    import org.apache.beam.sdk.transforms.ParDo;
    import org.apache.beam.sdk.values.PCollection;

    public class Task {

      public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).create();
        Pipeline pipeline = Pipeline.create(options);

        pipeline
            .apply(Create.of("1,2,3,4,5", "6,7,8,9,10"))
            .apply(new ExtractAndMultiplyNumbers())
            .apply(Log.ofElements());

        pipeline.run();
      }

      static class ExtractAndMultiplyNumbers
          extends PTransform<PCollection<String>, PCollection<Integer>> {

        TODO()

      }
    }
  learner_created: false
- name: test/org/apache/beam/learning/katas/coretransforms/composite/TaskTest.java
  visible: false
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.coretransforms.composite;

    import org.apache.beam.learning.katas.coretransforms.composite.Task.ExtractAndMultiplyNumbers;
    import org.apache.beam.sdk.testing.PAssert;
    import org.apache.beam.sdk.testing.TestPipeline;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.values.PCollection;
    import org.junit.Rule;
    import org.junit.Test;

    public class TaskTest {

      @Rule
      public final transient TestPipeline testPipeline = TestPipeline.create();

      @Test
      public void compositeTransform() {
        Create.Values<String> values = Create.of("1,2,3,4,5", "6,7,8,9,10");

        PCollection<Integer> results =
            testPipeline
                .apply(values)
                .apply(new ExtractAndMultiplyNumbers());

        PAssert.that(results)
            .containsInAnyOrder(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);

        testPipeline.run().waitUntilFinish();
      }

    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 29 Mar 2021 19:40:05 UTC
record: -1
