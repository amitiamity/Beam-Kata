type: edu
files:
- name: src/org/apache/beam/learning/katas/commontransforms/withkeys/Task.java
  visible: true
  placeholders:
  - offset: 2040
    length: 148
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1875
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      input
              .apply(WithKeys.<String, String>of(fruit -> fruit.substring(0, 1))
                  .withKeyType(strings()))
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.commontransforms.withkeys;

    import static org.apache.beam.sdk.values.TypeDescriptors.strings;

    import org.apache.beam.learning.katas.util.Log;
    import org.apache.beam.sdk.Pipeline;
    import org.apache.beam.sdk.options.PipelineOptions;
    import org.apache.beam.sdk.options.PipelineOptionsFactory;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.transforms.WithKeys;
    import org.apache.beam.sdk.values.KV;
    import org.apache.beam.sdk.values.PCollection;

    public class Task {

      public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).create();
        Pipeline pipeline = Pipeline.create(options);

        PCollection<String> words =
            pipeline.apply(
                Create.of("apple", "banana", "cherry", "durian", "guava", "melon"));

        PCollection<KV<String, String>> output = applyTransform(words);

        output.apply(Log.ofElements());

        pipeline.run();
      }

      static PCollection<KV<String, String>> applyTransform(PCollection<String> input) {
        return TODO();
      }

    }
  learner_created: false
- name: test/org/apache/beam/learning/katas/commontransforms/withkeys/TaskTest.java
  visible: false
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.commontransforms.withkeys;

    import org.apache.beam.sdk.testing.PAssert;
    import org.apache.beam.sdk.testing.TestPipeline;
    import org.apache.beam.sdk.transforms.Create;
    import org.apache.beam.sdk.values.KV;
    import org.apache.beam.sdk.values.PCollection;
    import org.junit.Rule;
    import org.junit.Test;

    public class TaskTest {

      @Rule
      public final transient TestPipeline testPipeline = TestPipeline.create();

      @SuppressWarnings("unchecked")
      @Test
      public void groupByKey() {
        PCollection<String> numbers =
            testPipeline.apply(
                Create.of("apple", "banana", "cherry", "durian", "guava", "melon")
            );

        PCollection<KV<String, String>> results = Task.applyTransform(numbers);

        PAssert.that(results)
            .containsInAnyOrder(
                KV.of("a", "apple"),
                KV.of("b", "banana"),
                KV.of("c", "cherry"),
                KV.of("d", "durian"),
                KV.of("g", "guava"),
                KV.of("m", "melon")
            );

        testPipeline.run().waitUntilFinish();
      }

    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 29 Mar 2021 19:58:12 UTC
record: -1
