type: edu
files:
- name: src/org/apache/beam/learning/katas/triggers/earlytriggers/GenerateEvent.java
  visible: true
  text: |
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.triggers.earlytriggers;

    import static org.apache.beam.sdk.values.TypeDescriptors.strings;

    import org.apache.beam.sdk.io.GenerateSequence;
    import org.apache.beam.sdk.transforms.MapElements;
    import org.apache.beam.sdk.transforms.PTransform;
    import org.apache.beam.sdk.values.PBegin;
    import org.apache.beam.sdk.values.PCollection;
    import org.joda.time.Duration;

    public class GenerateEvent extends PTransform<PBegin, PCollection<String>> {

      static GenerateEvent everySecond() {
        return new GenerateEvent();
      }

      public PCollection<String> expand(PBegin input) {
        return input
            .apply(GenerateSequence.from(1).withRate(1, Duration.standardSeconds(1)))
            .apply(MapElements.into(strings()).via(num -> "event"));
      }

    }
  learner_created: false
- name: src/org/apache/beam/learning/katas/triggers/earlytriggers/Task.java
  visible: true
  placeholders:
  - offset: 1970
    length: 465
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1970
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      events
              .apply(
                  Window.<String>into(FixedWindows.of(Duration.standardDays(1)))
                      .triggering(
                          AfterWatermark.pastEndOfWindow()
                          .withEarlyFirings(
                              AfterProcessingTime.pastFirstElementInPane()))
                      .withAllowedLateness(Duration.ZERO)
                      .discardingFiredPanes())

              .apply(Combine.globally(Count.<String>combineFn()).withoutDefaults())
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.triggers.earlytriggers;

    import org.apache.beam.learning.katas.util.Log;
    import org.apache.beam.sdk.Pipeline;
    import org.apache.beam.sdk.options.PipelineOptions;
    import org.apache.beam.sdk.options.PipelineOptionsFactory;
    import org.apache.beam.sdk.transforms.Combine;
    import org.apache.beam.sdk.transforms.Count;
    import org.apache.beam.sdk.transforms.windowing.AfterProcessingTime;
    import org.apache.beam.sdk.transforms.windowing.AfterWatermark;
    import org.apache.beam.sdk.transforms.windowing.FixedWindows;
    import org.apache.beam.sdk.transforms.windowing.Window;
    import org.apache.beam.sdk.values.PCollection;
    import org.joda.time.Duration;

    public class Task {

      public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).create();
        Pipeline pipeline = Pipeline.create(options);

        PCollection<String> events =
            pipeline.apply(GenerateEvent.everySecond());

        PCollection<Long> output = applyTransform(events);

        output.apply(Log.ofElements());

        pipeline.run();
      }

      static PCollection<Long> applyTransform(PCollection<String> events) {
        return TODO();
      }

    }
  learner_created: false
- name: test/org/apache/beam/learning/katas/triggers/earlytriggers/TaskTest.java
  visible: false
  text: |-
    /*
     * Licensed to the Apache Software Foundation (ASF) under one
     * or more contributor license agreements.  See the NOTICE file
     * distributed with this work for additional information
     * regarding copyright ownership.  The ASF licenses this file
     * to you under the Apache License, Version 2.0 (the
     * "License"); you may not use this file except in compliance
     * with the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    package org.apache.beam.learning.katas.triggers.earlytriggers;

    import java.io.Serializable;
    import org.apache.beam.sdk.coders.SerializableCoder;
    import org.apache.beam.sdk.testing.PAssert;
    import org.apache.beam.sdk.testing.TestPipeline;
    import org.apache.beam.sdk.testing.TestStream;
    import org.apache.beam.sdk.transforms.windowing.IntervalWindow;
    import org.apache.beam.sdk.values.PCollection;
    import org.apache.beam.sdk.values.TimestampedValue;
    import org.joda.time.Duration;
    import org.joda.time.Instant;
    import org.junit.Rule;
    import org.junit.Test;

    public class TaskTest implements Serializable {

      @Rule
      public final transient TestPipeline testPipeline = TestPipeline.create();

      @Test
      public void eventTimeTrigger() {
        TestStream<String> testStream =
            TestStream.create(SerializableCoder.of(String.class))
                .addElements(TimestampedValue.of("event", Instant.ofEpochSecond(0)))
                .advanceProcessingTime(Duration.standardSeconds(1))
                .addElements(TimestampedValue.of("event", Instant.ofEpochSecond(1)))
                .addElements(TimestampedValue.of("event", Instant.ofEpochSecond(2)))
                .addElements(TimestampedValue.of("event", Instant.ofEpochSecond(3)))
                .addElements(TimestampedValue.of("event", Instant.ofEpochSecond(4)))
                .advanceProcessingTime(Duration.standardSeconds(1))
                .addElements(TimestampedValue.of("event", Instant.ofEpochSecond(5)))
                .addElements(TimestampedValue.of("event", Instant.ofEpochSecond(6)))
                .advanceWatermarkToInfinity();

        PCollection<String> eventsPColl = testPipeline.apply(testStream);

        PCollection<Long> results = Task.applyTransform(eventsPColl);

        PAssert.that(results)
            .inEarlyPane(new IntervalWindow(Instant.EPOCH, Instant.parse("1970-01-02T00:00:00+00:00")))
            .containsInAnyOrder(1L, 4L)
            .inFinalPane(new IntervalWindow(Instant.EPOCH, Instant.parse("1970-01-02T00:00:00+00:00")))
            .containsInAnyOrder(2L);

        testPipeline.run().waitUntilFinish();
      }

    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 15 May 2021 18:58:43 UTC
record: -1
